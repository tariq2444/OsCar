%
% Calculation of the thrust generated by an oscillating caudal fin via the 
% reduced model proposed in "Developing a bio-inspired underwater robot with a 
% morphing caudal fin for the surveillance of coral reefs", 2025
%
% The original model is calculated for comparison too.
%
%
%
% authors: Davide Grande
% date: 04/06/2025
%
% To calculate the desired thrust, change the parameters in Section 1.
%
%


%% Section 1: parameters (can be edited)
% The following parameters are relative to OsCar are developed in this
% publication
A = 0.0194; % [m] OsCar, open caudal fin configuration
x = 0.131; % OsCar, length of the open caudal fin configuration
rho = 1000; % [kg/m3]
u = 0.184; % [m/s] surge speed
f_desired = 2; % [Hz]
theta_0_desired = deg2rad(30); % [rad]


%% Section 2: calculation (do not edit)

disp("Calculating thurst force at " + f_desired + " [Hz], " + rad2deg(theta_0_desired) + " [deg], and u=" + u + " [m/s] ...");


f_verification = f_desired;
T = 1/f_verification;
theta_0_verification = theta_0_desired;
samples_per_period = ceil(T / Dt);

time_vect = linspace(0, T, samples_per_period); % time vector

% time derivative
dh_dt_square_temp_thrust = trapz(time_vect, ...
    (2*pi*f_verification*theta_0_verification*x*sec(theta_0_verification*sin(2*pi*f_verification*time_vect)).^2.*cos(2*pi*f_verification*time_vect)).^2);
dh_dt_square_thrust = 1/T * dh_dt_square_temp_thrust;

% spatial derivative
dh_dx_square_temp_thrust = trapz(time_vect, ... 
    (tan(theta_0_verification * sin(2*pi*f_verification*time_vect))).^2);
dh_dx_square_thrust = 1/T * dh_dx_square_temp_thrust;

disp("Generate thrust force (full model) = ")
T_fin_model_complete = rho * A / 2 * (dh_dt_square_thrust - u^2 * dh_dx_square_thrust)

disp("Desired thrust force (reduced model) = ")
T_fin_model_reduced = rho * A / 2 * (dh_dt_square_thrust)