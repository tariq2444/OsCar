%
% Calculation of the maximum error between the full and reduced model of 
% the thrust generated by an oscillating caudal fin. 
%
% Code developed for "Developing a bio-inspired underwater robot with a 
% morphing caudal fin for the surveillance of coral reefs", 2025
%
% authors: Davide Grande
% date: 04/06/2025
%

clear all
close all
clc

%% 1) Parameters 
Dt = 0.001; % time step for the numerical integration

% The following parameters are relative to OsCar are developed in this
% publication
A = 0.0194; % [m] OsCar, open caudal fin configuration
x = 0.131; % OsCar, length of the open caudal fin configuration
rho = 1000; % [kg/m3]


% Thrust plot calculation
theta_0_thrust = 80.0; % [deg] - max angle for the calculation
f_min_thrust = 0.001; % [Hz]
f_max_thrust = 3.0; % [Hz]
u_min = 0.01; % [m/s]
u_max = 1.5; % [m/s]


%% 3) Plot thrust
disp("Generating trust comparisons...")

interval_number = 100; % reduced from the original value to ease computational burden 
amplitude_range_verification = linspace(0.0, deg2rad(theta_0_thrust), interval_number); % [rad]
freq_range_verification = linspace(f_min_thrust, f_max_thrust, interval_number); % [Hz]
u_range_verification = linspace(u_min, u_max, interval_number); % [m/s]


dh_dt_square_torque = zeros(interval_number, interval_number);
dh_dx_square_torque = zeros(interval_number, interval_number);
T_fin = zeros(interval_number, interval_number, interval_number);
T_fin_reduced = zeros(interval_number, interval_number, interval_number);

for i_ampl = 1:length(amplitude_range_verification)

    for i_freq = 1:length(freq_range_verification)
    
        f_verification = freq_range_verification(i_freq);
        T = 1/f_verification;
        theta_0_verification = amplitude_range_verification(i_ampl);
        samples_per_period = ceil(T / Dt);


        time_vect = linspace(0, T, samples_per_period); % time vector

        % time derivative
        dh_dt_square_temp = trapz(time_vect, ...
            (2*pi*f_verification*theta_0_verification*x*sec(theta_0_verification*sin(2*pi*f_verification*time_vect)).^2.*cos(2*pi*f_verification*time_vect)).^2);
        dh_dt_square_torque(i_ampl, i_freq) = 1/T * dh_dt_square_temp;

        % spatial derivative
        dh_dx_square_temp = trapz(time_vect, ... 
            (tan(theta_0_verification * sin(2*pi*f_verification*time_vect))).^2);
        dh_dx_square_torque(i_ampl, i_freq) = 1/T * dh_dx_square_temp;
       
        for i_speed = 1:length(u_range_verification)
            u = u_range_verification(i_speed);
            % Full model
            T_fin(i_ampl, i_freq, i_speed) = rho * A / 2 * (dh_dt_square_torque(i_ampl, i_freq) - u^2 .* dh_dx_square_torque(i_ampl, i_freq));
            % Reduced thrust propulsion model
            T_fin_reduced(i_ampl, i_freq, i_speed) = rho*A/2*dh_dt_square_torque(i_ampl, i_freq);
        end 

    end 

end

% Just extracting a slice at the typical OsCar speed to make sure that this 
% analysis is consisten with previous results
[~, slice] = min(abs(u_range_verification - 0.184));


% Exluded percentage of models based on:
T_is_valid = (T_fin> 0.0);
perc_T_valid = sum(T_is_valid, "all")/ (interval_number)^3 * 100
T_reduced_is_valid = (T_fin_reduced> 0.0);
perc_T_reduced_valid = sum(T_reduced_is_valid, "all")/ (interval_number)^3 * 100

% removing spurious numerical elements
T_fin(T_fin< 1e-5) = NaN;
T_fin_reduced(T_fin_reduced<1e-5) = NaN;


figure
surf(rad2deg(amplitude_range_verification), freq_range_verification, T_fin(:,:,slice))
ylabel("$f$ [Hz]",'Interpreter','latex')
xlabel("$\theta_0$ [deg]",'Interpreter','latex')
zlabel("$T$ [N]", 'Interpreter','latex')
title('Full model (singl slice at usual OsCar speed)')
grid on
fontsize(scale=1.35) 
grid minor
ax = gca;
ax.GridAlpha = 0.5;
ax.MinorGridAlpha = 0.3;


figure
surf(rad2deg(amplitude_range_verification), freq_range_verification, abs(T_fin(:,:,slice)-T_fin_reduced(:,:,slice)))
ylabel("$f$ [Hz]",'Interpreter','latex')
xlabel("$\theta_0$ [deg]",'Interpreter','latex')
zlabel("$T$ [N]", 'Interpreter','latex')
title('Difference between models (singl slice at usual OsCar speed)')
grid on
fontsize(scale=1.35) 
grid minor
ax = gca;
ax.GridAlpha = 0.5;
ax.MinorGridAlpha = 0.3;



% calculation of the relative error
err_rel_raw = abs(T_fin-T_fin_reduced) ./ max(abs(T_fin), abs(T_fin_reduced)) * 100;

% Applying a corrective factor for small denominators
numerator = abs(T_fin - T_fin_reduced);
denominator = max(abs(T_fin), abs(T_fin_reduced)); % T_fin is the groundtruth, but the T_fin_reduced is always bigger by definition
denominator_is_valid = denominator > 0.0;
numerator_is_valid = numerator > 0.0;
model_valid = denominator_is_valid & numerator_is_valid;
err_rel = NaN(size(err_rel_raw));
err_rel(model_valid) = numerator(model_valid) ./ denominator(model_valid) * 100;

% Exluded percentage of models based on:
perc_denom_valid = sum(denominator_is_valid, "all")/ (interval_number)^3 * 100
perc_num_valid = sum(numerator_is_valid, "all")/ (interval_number)^3 * 100



err_rel_mean_theta=zeros(size(amplitude_range_verification, 2), size(u_range_verification, 2));
err_rel_mean_freq=zeros(size(freq_range_verification, 2), size(u_range_verification, 2));

for i_speed = 1:length(u_range_verification)
    err_rel_mean_theta(i_speed,:) = mean(err_rel(:,:,i_speed),1,"omitnan");
    err_rel_mean_freq(i_speed,:) = mean(err_rel(:,:,i_speed),2,"omitnan");
end 



figure
surf(rad2deg(amplitude_range_verification), u_range_verification, err_rel_mean_theta)
xlabel("$\theta_0$ [deg]",'Interpreter','latex')
ylabel("$u$ [m/s]",'Interpreter','latex')
zlabel("Rel. err [%]", 'Interpreter','latex')
title('Rel error (angle, speed)')
grid on
fontsize(scale=1.35) 
grid minor
ax = gca;
ax.GridAlpha = 0.5;
ax.MinorGridAlpha = 0.3;
colorbar



figure
surf(freq_range_verification, u_range_verification, err_rel_mean_freq)
xlabel("$f$ [Hz]",'Interpreter','latex')
ylabel("$u$ [m/s]",'Interpreter','latex')
zlabel("Rel. err [%]", 'Interpreter','latex')
title('Rel error (freq, speed)')
grid on
fontsize(scale=1.35) 
grid minor
ax = gca;
ax.GridAlpha = 0.5;
ax.MinorGridAlpha = 0.3;
colorbar




[~, idx_u] = min(abs(u_range_verification - 0.184));

verification_err_rel_raw_u = err_rel_raw(:, :, idx_u);
err_rel_mean_theta = mean(verification_err_rel_raw_u,1,"omitnan");

figure
plot(rad2deg(amplitude_range_verification), err_rel_mean_theta)
ylabel("Rel. err [%]",'Interpreter','latex')
xlabel("$\theta_0$ [deg]",'Interpreter','latex')
title('Rel err vs $\theta_0$ [%]','Interpreter','latex')
grid on
fontsize(scale=1.35) 
