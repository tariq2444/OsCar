%
% Calculation of the maximum error between the full and reduced model of 
% the thrust generated by an oscillating caudal fin. 
%
% Code developed for "Developing a bio-inspired underwater robot with a 
% morphing caudal fin for the surveillance of coral reefs", 2025
%
% authors: Davide Grande
% date: 04/06/2025
%

clear all
close all
clc

%% 1) Parameters 
Dt = 0.001; % time step for the numerical integration

% The following parameters are relative to OsCar are developed in this
% publication
A = 0.0194; % [m] OsCar, open caudal fin configuration
x = 0.131; % OsCar, length of the open caudal fin configuration
rho = 1000; % [kg/m3]


% Thrust plot calculation
theta_0_thrust = 70.0; % [deg] - max angle for the calculation
f_min_thrust = 0.001; % [Hz]
f_max_thrust = 3.0; % [Hz]
u_min = 0.01; % [m/s]
u_max = 1.5; % [m/s]


%% 3) Plot thrust
disp("Generating trust comparisons...")

interval_number = 100; % reduced from the original value to ease computational burden 
amplitude_range_verification = linspace(0.0, deg2rad(theta_0_thrust), interval_number); % [rad]
freq_range_verification = linspace(f_min_thrust, f_max_thrust, interval_number); % [Hz]
u_range_verification = linspace(u_min, u_max, interval_number); % [m/s]


dh_dt_square_torque = zeros(interval_number, interval_number);
dh_dx_square_torque = zeros(interval_number, interval_number);
T_fin = zeros(interval_number, interval_number, interval_number);
T_fin_reduced = zeros(interval_number, interval_number, interval_number);

for i_ampl = 1:length(amplitude_range_verification)

    for i_freq = 1:length(freq_range_verification)
    
        f_verification = freq_range_verification(i_freq);
        T = 1/f_verification;
        theta_0_verification = amplitude_range_verification(i_ampl);
        samples_per_period = ceil(T / Dt);


        time_vect = linspace(0, T, samples_per_period); % time vector

        % time derivative
        dh_dt_square_temp = trapz(time_vect, ...
            (2*pi*f_verification*theta_0_verification*x*sec(theta_0_verification*sin(2*pi*f_verification*time_vect)).^2.*cos(2*pi*f_verification*time_vect)).^2);
        dh_dt_square_torque(i_ampl, i_freq) = 1/T * dh_dt_square_temp;

        % spatial derivative
        dh_dx_square_temp = trapz(time_vect, ... 
            (tan(theta_0_verification * sin(2*pi*f_verification*time_vect))).^2);
        dh_dx_square_torque(i_ampl, i_freq) = 1/T * dh_dx_square_temp;
       
        for i_speed = 1:length(u_range_verification)
            u = u_range_verification(i_speed);
            % Full model
            T_fin(i_ampl, i_freq, i_speed) = rho * A / 2 * (dh_dt_square_torque(i_ampl, i_freq) - u^2 .* dh_dx_square_torque(i_ampl, i_freq));
            % Reduced thrust propulsion model
            T_fin_reduced(i_ampl, i_freq, i_speed) = rho*A/2*dh_dt_square_torque(i_ampl, i_freq);
        end 

    end 

end


slice = 1;

figure
surf(rad2deg(amplitude_range_verification), freq_range_verification, T_fin(:,:,slice)-T_fin_reduced(:,:,slice))
ylabel("$f$ [Hz]",'Interpreter','latex')
xlabel("$\theta_0$ [deg]",'Interpreter','latex')
zlabel("$T$ [N]", 'Interpreter','latex')
title('Difference between models')
grid on
fontsize(scale=1.35) 
grid minor
ax = gca;
ax.GridAlpha = 0.5;
ax.MinorGridAlpha = 0.3;


